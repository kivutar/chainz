// Code generated by go-bindata.
// sources:
// schema.graphql
// type/page_info.graphql
// type/role.graphql
// type/time.graphql
// type/user.graphql
// type/users_connection.graphql
// type/users_edge.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x31\xae\xc2\x30\x0c\x06\xe0\xbd\xa7\xf8\xbb\xf5\x49\x3d\x41\xd6\x37\x31\x30\x20\xd4\x03\x58\xc5\x85\x48\x24\x29\xb6\x23\x54\xa1\xde\x1d\x15\x12\x96\x4e\xb6\xec\xdf\xfa\xac\xe3\x8d\x03\xe1\xd5\x00\xc0\x23\xb3\x2c\x0e\xa7\xad\x7c\x06\x21\x1b\x99\x4f\xd1\xe1\x58\xba\x66\x6d\x6c\x99\xf9\x9b\x29\x67\x59\x59\x3a\x0e\xe4\xef\x0e\x67\x13\x1f\xaf\xed\x9f\xc3\xa0\x2c\xbf\xb5\x76\x93\x17\x35\x87\x43\xb4\x1e\xa0\xc9\x58\x6a\xb8\x64\xf5\x3f\xc5\xc8\xe3\x86\xb4\x55\xa9\x6a\x81\x46\x61\x32\x1e\xf6\x5c\x8f\x99\x54\x9f\x49\x2e\xbb\x0f\xd6\x77\x00\x00\x00\xff\xff\x42\xc8\x0b\x63\xe2\x00\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 226, mode: os.FileMode(420), modTime: time.Unix(1532707887, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typePage_infoGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x48\x4c\x4f\xf5\xcc\x4b\xcb\x57\xa8\xe6\x52\x50\x50\x50\x28\x2e\x49\x2c\x2a\x71\x2e\x2d\x2a\xce\x2f\xb2\x52\xf0\x74\x01\x8b\xa5\xe6\xa5\xa0\x89\x64\x24\x16\xfb\xa5\x56\x94\x80\xf4\x5a\x29\x38\xe5\xe7\xe7\xa4\x26\xe6\x29\x72\xd5\x02\x02\x00\x00\xff\xff\x7d\xf2\x3d\xf2\x51\x00\x00\x00")

func typePage_infoGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typePage_infoGraphql,
		"type/page_info.graphql",
	)
}

func typePage_infoGraphql() (*asset, error) {
	bytes, err := typePage_infoGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/page_info.graphql", size: 81, mode: os.FileMode(420), modTime: time.Unix(1532707887, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeRoleGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\xca\xcf\x49\x55\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\x74\x51\x04\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xb9\x6a\x01\x01\x00\x00\xff\xff\x54\x50\x16\xc3\x2a\x00\x00\x00")

func typeRoleGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeRoleGraphql,
		"type/role.graphql",
	)
}

func typeRoleGraphql() (*asset, error) {
	bytes, err := typeRoleGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/role.graphql", size: 42, mode: os.FileMode(420), modTime: time.Unix(1532707887, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeTimeGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x4e\xcc\x49\x2c\x52\x08\xc9\xcc\x4d\x05\x04\x00\x00\xff\xff\x86\x36\xc3\xbe\x0b\x00\x00\x00")

func typeTimeGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeTimeGraphql,
		"type/time.graphql",
	)
}

func typeTimeGraphql() (*asset, error) {
	bytes, err := typeTimeGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/time.graphql", size: 11, mode: os.FileMode(420), modTime: time.Unix(1532707887, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeUserGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xc8\x3d\x0a\x02\x31\x10\x05\xe0\x7e\x4f\xf1\xbc\xc6\x74\x0b\x36\xb6\xfe\x54\x62\x11\x9c\x87\x0c\x64\x4d\x98\x19\x10\x11\xef\xbe\x90\x2e\xdd\xc7\x97\xdf\x4e\xdc\x82\x8e\xdf\x02\x00\xa6\x82\xd3\xf1\x30\xcc\xad\x58\x15\x5c\xd2\xed\xfd\x1a\xd3\x4b\xc4\xa7\xb9\x4e\x69\x7d\x55\x75\x46\x4c\xfb\x74\x96\xa4\xae\x29\xb8\xda\xc6\x71\xde\x2a\x43\x70\x3f\xb7\xca\xc7\xf2\xdf\x03\x00\x00\xff\xff\x8e\x77\x10\xa5\x7c\x00\x00\x00")

func typeUserGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeUserGraphql,
		"type/user.graphql",
	)
}

func typeUserGraphql() (*asset, error) {
	bytes, err := typeUserGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/user.graphql", size: 124, mode: os.FileMode(420), modTime: time.Unix(1532707887, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeUsers_connectionGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x2d\x4e\x2d\x2a\x76\xce\xcf\xcb\x4b\x4d\x2e\xc9\xcc\xcf\x53\xa8\xe6\x52\x50\x50\x50\x28\xc9\x2f\x49\xcc\x71\xce\x2f\xcd\x2b\xb1\x52\xf0\xcc\x2b\x51\x04\x0b\xa6\xa6\xa4\xa7\x16\x5b\x29\x44\x83\xb5\xb8\xa6\xa4\xa7\xc6\x82\x85\x0b\x12\xd3\x53\x3d\xf3\xd2\xf2\xad\x14\x02\xa0\x2c\x45\xae\x5a\x40\x00\x00\x00\xff\xff\x0f\xbc\x5f\xb6\x5c\x00\x00\x00")

func typeUsers_connectionGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeUsers_connectionGraphql,
		"type/users_connection.graphql",
	)
}

func typeUsers_connectionGraphql() (*asset, error) {
	bytes, err := typeUsers_connectionGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/users_connection.graphql", size: 92, mode: os.FileMode(420), modTime: time.Unix(1532707887, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeUsers_edgeGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x2d\x4e\x2d\x2a\x76\x4d\x49\x4f\x55\xa8\xe6\x52\x50\x50\x50\x48\x2e\x2d\x2a\xce\x2f\xb2\x52\xf0\x74\x51\x04\xf3\xf3\xf2\x53\x52\xad\xc0\xaa\xb8\x6a\x01\x01\x00\x00\xff\xff\x23\x9d\xf1\x4d\x31\x00\x00\x00")

func typeUsers_edgeGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeUsers_edgeGraphql,
		"type/users_edge.graphql",
	)
}

func typeUsers_edgeGraphql() (*asset, error) {
	bytes, err := typeUsers_edgeGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/users_edge.graphql", size: 49, mode: os.FileMode(420), modTime: time.Unix(1532707887, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
	"type/page_info.graphql": typePage_infoGraphql,
	"type/role.graphql": typeRoleGraphql,
	"type/time.graphql": typeTimeGraphql,
	"type/user.graphql": typeUserGraphql,
	"type/users_connection.graphql": typeUsers_connectionGraphql,
	"type/users_edge.graphql": typeUsers_edgeGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
	"type": &bintree{nil, map[string]*bintree{
		"page_info.graphql": &bintree{typePage_infoGraphql, map[string]*bintree{}},
		"role.graphql": &bintree{typeRoleGraphql, map[string]*bintree{}},
		"time.graphql": &bintree{typeTimeGraphql, map[string]*bintree{}},
		"user.graphql": &bintree{typeUserGraphql, map[string]*bintree{}},
		"users_connection.graphql": &bintree{typeUsers_connectionGraphql, map[string]*bintree{}},
		"users_edge.graphql": &bintree{typeUsers_edgeGraphql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

